#include "stdafx.h"
#include <iostream>
#include <windows.h>
#include <sqlext.h>
#include <sqltypes.h>
#include <sql.h>
#include<string.h>
#include "stdc++.h"
#include <chrono>

using namespace std;
using namespace std::chrono;

vector<int>Serial;
vector<string>Name;

vector<string>A1;
vector<string>A2;
vector<string>A3;
vector<double>N1;
vector<double>N2;
vector<double>N3;
//vector<double>N4;

vector<double>BN1;
vector<double>BN2;
vector<double>BN3;
//vector<double>BN4;

vector<double>PN1;
vector<double>PN2;
vector<double>PN3;
//vector<double>PN4;

vector<int>bid[30];
vector< pair<int, int> >pid[15];

int T[15000];
int B[30];

struct info{
	int nb1;
	double x1;
	double y1;
	double z1;

	int nb2;
	double x2;
	double y2;
	double z2;
	
	int nb3;
	double x3;
	double y3;
	double z3;
	

};

info neighbor[30];


void showSQLError(unsigned int handleType, const SQLHANDLE& handle)
{
	SQLCHAR SQLState[1024];
	SQLCHAR message[1024];
	if (SQL_SUCCESS == SQLGetDiagRec(handleType, handle, 1, SQLState, NULL, message, 1024, NULL))
		// Returns the current values of multiple fields of a diagnostic record that contains error, warning, and status information
		cout << "SQL driver message: " << message << "\nSQL state: " << SQLState << "." << endl;
}

int func(int input)
{
	SQLHANDLE SQLEnvHandle = NULL;
	SQLHANDLE SQLConnectionHandle = NULL;
	SQLHANDLE SQLStatementHandle = NULL;
	SQLRETURN retCode = 0;

	char shw[] = "SELECT TOP 40 APPLICATION_SN,APPLICANT_NAME,PRE_DIVISION,PRE_DISTRICT,PRE_THANA,SSC_GPA_MARKS_OBTAINED,HSC_GPA_MARKS_OBTAINED,HSC_TOTAL FROM admission WHERE PRE_DIVISION='Dhaka' and PRE_DISTRICT='Dhaka' and PRE_THANA='Mirpur' ORDER BY ((SSC_GPA_MARKS_OBTAINED+HSC_GPA_MARKS_OBTAINED+HSC_TOTAL))  ";
	char shw1[] = "SELECT TOP 10 APPLICATION_SN,APPLICANT_NAME,PRE_DIVISION,PRE_DISTRICT,PRE_THANA,SSC_GPA_MARKS_OBTAINED,HSC_GPA_MARKS_OBTAINED,HSC_TOTAL FROM admission WHERE PRE_DIVISION='Khulna' and PRE_DISTRICT='Kushtia' and PRE_THANA='Dowlotpur' ORDER BY ((SSC_GPA_MARKS_OBTAINED-HSC_GPA_MARKS_OBTAINED)*(HSC_TOTAL))  ";
	char insrt[] = "INSERT INTO people3 VALUES('raju',28)";
	char crt_tbl[] = "CREATE TABLE [dbo].[sample](tid INT, a1 INT , a2 INT , n1 FLOAT , n2 FLOAT ) ";
	char ifile[] = "BULK INSERT sample FROM 'F:\\datacube\\inn.txt' WITH(FIELDTERMINATOR = ',',ROWTERMINATOR = '\n')";
	//char cube_gen[] = "select model, year, color, sum(amount)  from sales group by color, year, model with CUBE";
	char cube_gen[] = "insert into sales1(model,year,color,amount) select model, year, color, sum(amount)  from sales group by color, year, model with CUBE";
	//char cube_gen[] = "select case when model is null  then 'ALL' when year is null then 'ALL' when color is null then 'ALL' end model, coalesce(model, '') model, year, color, sum(amount) from sales group by color, year, model with CUBE";
	char SQLQuery[10000];
	//int input;
	//cout << " 1. show" << endl;
	//cout << " 2. insert" << endl;
	//cout << " 3. Create a table" << endl;
	//cout << " 4. take input from file" << endl;
	//cin >> input;
	if (input == 1)
	{
		strcpy_s(SQLQuery, shw);
	}
	else if (input == 2)
	{
		strcpy_s(SQLQuery, shw1);
	}
	else if (input == 3)
	{
		strcpy_s(SQLQuery, crt_tbl);
	}
	else if (input == 4)
	{
		strcpy_s(SQLQuery, ifile);
	}
	else if (input == 5)
	{
		strcpy_s(SQLQuery, cube_gen);
	}
	//getchar();
	do {
		if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &SQLEnvHandle))
			// Allocates the environment
			break;
		if (SQL_SUCCESS != SQLSetEnvAttr(SQLEnvHandle, SQL_ATTR_ODBC_VERSION, (SQLPOINTER)SQL_OV_ODBC3, 0))
			// Sets attributes that govern aspects of environments
			break;
		if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_DBC, SQLEnvHandle, &SQLConnectionHandle))
			// Allocates the connection
			break;
		if (SQL_SUCCESS != SQLSetConnectAttr(SQLConnectionHandle, SQL_LOGIN_TIMEOUT, (SQLPOINTER)5, 0))
			// Sets attributes that govern aspects of connections
			break;
		SQLCHAR retConString[1024]; // Conection string
		switch (SQLDriverConnect(SQLConnectionHandle, NULL, (SQLCHAR*)"DRIVER={SQL Server}; SERVER=localhost, 1433; DATABASE=myDB; UID=myID; PWD=1234;", SQL_NTS, retConString, 1024, NULL, SQL_DRIVER_NOPROMPT)) {
			// Establishes connections to a driver and a data source
		case SQL_SUCCESS:
			break;
		case SQL_SUCCESS_WITH_INFO:
			break;
		case SQL_NO_DATA_FOUND:
			showSQLError(SQL_HANDLE_DBC, SQLConnectionHandle);
			retCode = -1;
			break;
		case SQL_INVALID_HANDLE:
			showSQLError(SQL_HANDLE_DBC, SQLConnectionHandle);
			retCode = -1;
			break;
		case SQL_ERROR:
			showSQLError(SQL_HANDLE_DBC, SQLConnectionHandle);
			retCode = -1;
			break;
		default:
			break;
		}
		if (retCode == -1)
			break;
		if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_STMT, SQLConnectionHandle, &SQLStatementHandle))
			// Allocates the statement
			break;
		if (SQL_SUCCESS != SQLExecDirect(SQLStatementHandle, (SQLCHAR*)SQLQuery, SQL_NTS)) {
			// Executes a preparable statement
			showSQLError(SQL_HANDLE_STMT, SQLStatementHandle);
			break;
		}
		else {
			int sn;
			char name[100];
			char a1[100];
			char a2[100];
			char a3[100];
			double n1;
			double n2;
			double n3;

			while (SQLFetch(SQLStatementHandle) == SQL_SUCCESS) {
				// Fetches the next rowset of data from the result


				SQLGetData(SQLStatementHandle, 1, SQL_C_DEFAULT, &sn, sizeof(sn), NULL);
				SQLGetData(SQLStatementHandle, 2, SQL_C_DEFAULT, &name, sizeof(name), NULL);
				SQLGetData(SQLStatementHandle, 3, SQL_C_DEFAULT, &a1, sizeof(a1), NULL);
				SQLGetData(SQLStatementHandle, 4, SQL_C_DEFAULT, &a2, sizeof(a2), NULL);
				SQLGetData(SQLStatementHandle, 5, SQL_C_DEFAULT, &a3, sizeof(a3), NULL);
				SQLGetData(SQLStatementHandle, 6, SQL_C_DEFAULT, &n1, sizeof(n1), NULL);
				SQLGetData(SQLStatementHandle, 7, SQL_C_DEFAULT, &n2, sizeof(n2), NULL);
				SQLGetData(SQLStatementHandle, 8, SQL_C_DEFAULT, &n3, sizeof(n3), NULL);
			
				cout << sn << " " << name << " " << a1 << " " << a2 << " " << a3 << " " << n1 << " " << n2 << " " << n3 << endl;


			}
		}
	} while (FALSE);
	SQLFreeHandle(SQL_HANDLE_STMT, SQLStatementHandle);
	SQLDisconnect(SQLConnectionHandle);
	SQLFreeHandle(SQL_HANDLE_DBC, SQLConnectionHandle);
	SQLFreeHandle(SQL_HANDLE_ENV, SQLEnvHandle);
	// Frees the resources and disconnects
	//getchar();
	return 0;
}

int equi_depth()
{
	SQLHANDLE SQLEnvHandle = NULL;
	SQLHANDLE SQLConnectionHandle = NULL;
	SQLHANDLE SQLStatementHandle = NULL;
	SQLRETURN retCode = 0;

	char shw[] = "SELECT * FROM admission";	
	char SQLQuery[10000];


	strcpy_s(SQLQuery, shw);
	//getchar();


	do {
		if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &SQLEnvHandle))
			// Allocates the environment
			break;

		if (SQL_SUCCESS != SQLSetEnvAttr(SQLEnvHandle, SQL_ATTR_ODBC_VERSION, (SQLPOINTER)SQL_OV_ODBC3, 0))
			// Sets attributes that govern aspects of environments
			break;

		if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_DBC, SQLEnvHandle, &SQLConnectionHandle))
			// Allocates the connection
			break;

		if (SQL_SUCCESS != SQLSetConnectAttr(SQLConnectionHandle, SQL_LOGIN_TIMEOUT, (SQLPOINTER)5, 0))
			// Sets attributes that govern aspects of connections
			break;

		SQLCHAR retConString[1024]; // Conection string
		switch (SQLDriverConnect(SQLConnectionHandle, NULL, (SQLCHAR*)"DRIVER={SQL Server}; SERVER=localhost, 1433; DATABASE=myDB; UID=myID; PWD=1234;", SQL_NTS, retConString, 1024, NULL, SQL_DRIVER_NOPROMPT)) {
			// Establishes connections to a driver and a data source
		case SQL_SUCCESS:
			break;
		case SQL_SUCCESS_WITH_INFO:
			break;
		case SQL_NO_DATA_FOUND:
			showSQLError(SQL_HANDLE_DBC, SQLConnectionHandle);
			retCode = -1;
			break;
		case SQL_INVALID_HANDLE:
			showSQLError(SQL_HANDLE_DBC, SQLConnectionHandle);
			retCode = -1;
			break;
		case SQL_ERROR:
			showSQLError(SQL_HANDLE_DBC, SQLConnectionHandle);
			retCode = -1;
			break;
		default:
			break;
		}

		if (retCode == -1)
			break;

		if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_STMT, SQLConnectionHandle, &SQLStatementHandle))
			// Allocates the statement
			break;

		if (SQL_SUCCESS != SQLExecDirect(SQLStatementHandle, (SQLCHAR*)SQLQuery, SQL_NTS)) {
			// Executes a preparable statement
			showSQLError(SQL_HANDLE_STMT, SQLStatementHandle);
			break;
		}
		else {
			int sn;
			char name[100];
			char a1[100];
			char a2[100];
			char a3[100];
			double n1;
			double n2;
			double n3;
			double n4;

			while (SQLFetch(SQLStatementHandle) == SQL_SUCCESS) {
				// Fetches the next rowset of data from the result
				

				SQLGetData(SQLStatementHandle, 1, SQL_C_DEFAULT, &sn, sizeof(sn), NULL);
				SQLGetData(SQLStatementHandle, 2, SQL_C_DEFAULT, &name, sizeof(name), NULL);
				SQLGetData(SQLStatementHandle, 3, SQL_C_DEFAULT, &a1, sizeof(a1), NULL);
				SQLGetData(SQLStatementHandle, 4, SQL_C_DEFAULT, &a2, sizeof(a2), NULL);
				SQLGetData(SQLStatementHandle, 5, SQL_C_DEFAULT, &a3, sizeof(a3), NULL);
				SQLGetData(SQLStatementHandle, 6, SQL_C_DEFAULT, &n1, sizeof(n1), NULL);
				SQLGetData(SQLStatementHandle, 7, SQL_C_DEFAULT, &n2, sizeof(n2), NULL);
				SQLGetData(SQLStatementHandle, 8, SQL_C_DEFAULT, &n3, sizeof(n3), NULL);
			    SQLGetData(SQLStatementHandle, 9, SQL_C_DEFAULT, &n4, sizeof(n4), NULL);
				// Retrieves data for a single column in the result set
				//cout << sn << " " << a1 << " " << a2 << " " << n1 << " " << n2 << endl;


				Serial.push_back(sn);
				Name.push_back(name);
				A1.push_back(a1);
				A2.push_back(a2);
				A3.push_back(a3);
				N1.push_back(n1);
				N2.push_back(n2);
				N3.push_back(n3);
				//N4.push_back(n4);
				


			}


			BN1.push_back(0);
			//BN1.push_back(4.33);
			BN1.push_back(4.55);
			BN1.push_back(4.75);
			BN1.push_back(10.00);

			BN2.push_back(0);
		//	BN2.push_back(4.5);
			BN2.push_back(4.67);
			BN2.push_back(4.92);
			BN2.push_back(92.80);

			BN3.push_back(0);
			//BN3.push_back(18.5);
			BN3.push_back(19.00);
			BN3.push_back(20.00);
			BN3.push_back(280.00);



			PN1.push_back(0);
			PN1.push_back(4.65);
			PN1.push_back(10.00);

			PN2.push_back(0);
			PN2.push_back(4.80);
			PN2.push_back(92.80);

			PN3.push_back(0);
			PN3.push_back(19.50);
			PN3.push_back(280.00);
            
			



			///ei porjonto modify kora hoise ajk////

	//		cout << endl << "Bin Boundaries for N1: ";

		/*	for (int i = 0; i < BN1.size(); i++)
			{
				cout << BN1[i] << " ";
			}
			*/
			cout << endl;
//			cout << endl << "Bin Boundaries for N2: ";

/*			for (int i = 0; i < BN2.size(); i++)
			{
				cout << BN2[i] << " ";
			}
			
			cout << endl;
			*/
		/*	cout << endl << "Bin Boundaries for N3: ";

			for (int i = 0; i < BN3.size(); i++)
			{
				cout << BN3[i] << " ";
			}

			cout << endl;

			cout << endl << "Pseudo Boundaries for N1: ";

			for (int i = 0; i < PN1.size(); i++)
			{
				cout << PN1[i] << " ";
			}

			cout << endl;
			cout << endl << "Pseudo Boundaries for N2: ";

			for (int i = 0; i < PN2.size(); i++)
			{
				cout << PN2[i] << " ";
			}

			cout << endl<<endl;

			cout << endl << "Pseudo Boundaries for N3: ";

			for (int i = 0; i < PN3.size(); i++)
			{
				cout << PN3[i] << " ";
			}

			cout << endl << endl;

			*/

			for (int t = 0; t < N1.size(); t++)
			{
				if (N1[t] >= BN1[0] && N1[t] <= BN1[1] && N2[t] >= BN2[0] && N2[t] <= BN2[1] && N3[t] >= BN3[0] && N3[t] <= BN3[1] ) bid[1].push_back(t + 1), T[t + 1] = 1;
				else if (N1[t] > BN1[1] && N1[t] <= BN1[2] && N2[t] >= BN2[0] && N2[t] <= BN2[1] && N3[t] >= BN3[0] && N3[t] <= BN3[1] ) bid[2].push_back(t + 1), T[t + 1] = 2;
				else if (N1[t] > BN1[2] && N1[t] <= BN1[3] && N2[t] >= BN2[0] && N2[t] <= BN2[1] && N3[t] >= BN3[0] && N3[t] <= BN3[1] ) bid[3].push_back(t + 1), T[t + 1] = 3;
				else if (N1[t] >= BN1[0] && N1[t] <= BN1[1] && N2[t] > BN2[1] && N2[t] <= BN2[2] && N3[t] >= BN3[0] && N3[t] <= BN3[1] ) bid[4].push_back(t + 1), T[t + 1] = 4;
				else if (N1[t] > BN1[1] && N1[t] <= BN1[2] && N2[t] > BN2[1] && N2[t] <= BN2[2] && N3[t] >= BN3[0] && N3[t] <= BN3[1] ) bid[5].push_back(t + 1), T[t + 1] = 5;
				else if (N1[t] > BN1[2] && N1[t] <= BN1[3] && N2[t] > BN2[1] && N2[t] <= BN2[2] && N3[t] >= BN3[0] && N3[t] <= BN3[1]  ) bid[6].push_back(t + 1), T[t + 1] = 6;
				else if (N1[t] >= BN1[0] && N1[t] <= BN1[1] && N2[t] > BN2[2] && N2[t] <= BN2[3] && N3[t] >= BN3[0] && N3[t] <= BN3[1]  ) bid[7].push_back(t + 1), T[t + 1] = 7;
				else if (N1[t] > BN1[1] && N1[t] <= BN1[2] && N2[t] > BN2[2] && N2[t] <= BN2[3] && N3[t] >= BN3[0] && N3[t] <= BN3[1]  ) bid[8].push_back(t + 1), T[t + 1] = 8;
				else if (N1[t] > BN1[2] && N1[t] <= BN1[3] && N2[t] > BN2[2] && N2[t] <= BN2[3] && N3[t] >= BN3[0] && N3[t] <= BN3[1]  ) bid[9].push_back(t + 1), T[t + 1] = 9;
				else if (N1[t] >= BN1[0] && N1[t] <= BN1[1] && N2[t] >= BN2[0] && N2[t] <= BN2[1] && N3[t] > BN3[1] && N3[t] <= BN3[2] ) bid[10].push_back(t + 1), T[t + 1] = 10;
				else if (N1[t] > BN1[1] && N1[t] <= BN1[2] && N2[t] >= BN2[0] && N2[t] <= BN2[1] && N3[t] > BN3[1] && N3[t] <= BN3[2] ) bid[11].push_back(t + 1), T[t + 1] = 11;
				else if (N1[t] > BN1[2] && N1[t] <= BN1[3] && N2[t] >= BN2[0] && N2[t] <= BN2[1] && N3[t] > BN3[1] && N3[t] <= BN3[2] ) bid[12].push_back(t + 1), T[t + 1] = 12;
				else if (N1[t] >= BN1[0] && N1[t] <= BN1[1] && N2[t] > BN2[1] && N2[t] <= BN2[2] && N3[t] > BN3[1] && N3[t] <= BN3[2] ) bid[13].push_back(t + 1), T[t + 1] = 13;
				else if (N1[t] > BN1[1] && N1[t] <= BN1[2] && N2[t] > BN2[1] && N2[t] <= BN2[2] && N3[t] > BN3[1] && N3[t] <= BN3[2] ) bid[14].push_back(t + 1), T[t + 1] = 14;
				else if (N1[t] > BN1[2] && N1[t] <= BN1[3] && N2[t] > BN2[1] && N2[t] <= BN2[2] && N3[t] > BN3[1] && N3[t] <= BN3[2] ) bid[15].push_back(t + 1), T[t + 1] = 15;
				else if (N1[t] >= BN1[0] && N1[t] <= BN1[1] && N2[t] > BN2[2] && N2[t] <= BN2[3] && N3[t] > BN3[1] && N3[t] <= BN3[2] ) bid[16].push_back(t + 1), T[t + 1] = 16;
				else if (N1[t] > BN1[1] && N1[t] <= BN1[2] && N2[t] > BN2[2] && N2[t] <= BN2[3] && N3[t] > BN3[1] && N3[t] <= BN3[2] ) bid[17].push_back(t + 1), T[t + 1] = 17;
				else if (N1[t] > BN1[2] && N1[t] <= BN1[3] && N2[t] > BN2[2] && N2[t] <= BN2[3] && N3[t] > BN3[1] && N3[t] <= BN3[2] ) bid[18].push_back(t + 1), T[t + 1] = 18;
				else if (N1[t] >= BN1[0] && N1[t] <= BN1[1] && N2[t] >= BN2[0] && N2[t] <= BN2[1] && N3[t] > BN3[2] && N3[t] <= BN3[3] ) bid[19].push_back(t + 1), T[t + 1] = 19;
				else if (N1[t] > BN1[1] && N1[t] <= BN1[2] && N2[t] >= BN2[0] && N2[t] <= BN2[1] && N3[t] > BN3[2] && N3[t] <= BN3[3] ) bid[20].push_back(t + 1), T[t + 1] = 20;
				else if (N1[t] > BN1[2] && N1[t] <= BN1[3] && N2[t] >= BN2[0] && N2[t] <= BN2[1] && N3[t] > BN3[2] && N3[t] <= BN3[3] ) bid[21].push_back(t + 1), T[t + 1] = 21;
				else if (N1[t] >= BN1[0] && N1[t] <= BN1[1] && N2[t] > BN2[1] && N2[t] <= BN2[2] && N3[t] > BN3[2] && N3[t] <= BN3[3] ) bid[22].push_back(t + 1), T[t + 1] = 22;
				else if (N1[t] > BN1[1] && N1[t] <= BN1[2] && N2[t] > BN2[1] && N2[t] <= BN2[2] && N3[t] > BN3[2] && N3[t] <= BN3[3] ) bid[23].push_back(t + 1), T[t + 1] = 23;
				else if (N1[t] > BN1[2] && N1[t] <= BN1[3] && N2[t] > BN2[1] && N2[t] <= BN2[2] && N3[t] > BN3[2] && N3[t] <= BN3[3] ) bid[24].push_back(t + 1), T[t + 1] = 24;
				else if (N1[t] >= BN1[0] && N1[t] <= BN1[1] && N2[t] > BN2[2] && N2[t] <= BN2[3] && N3[t] > BN3[2] && N3[t] <= BN3[3] ) bid[25].push_back(t + 1), T[t + 1] = 25;
				else if (N1[t] > BN1[1] && N1[t] <= BN1[2] && N2[t] > BN2[2] && N2[t] <= BN2[3] && N3[t] > BN3[2] && N3[t] <= BN3[3] ) bid[26].push_back(t + 1), T[t + 1] = 26;
				else if (N1[t] > BN1[2] && N1[t] <= BN1[3] && N2[t] > BN2[2] && N2[t] <= BN2[3] && N3[t] > BN3[2] && N3[t] <= BN3[3] ) bid[27].push_back(t + 1), T[t + 1] = 27;
				
				
                				
			}
			
/*			for (int i = 1; i <= 64; i++)
			{
				cout << "bid" << i << ": ";

				for (int j = 0; j < bid[i].size(); j++)
				{
					cout << bid[i][j] << " ";
				}
				cout << endl;
			}
			
			//for (int i = 1; i <= 21; i++) cout << "t" << i << ":" << T[i] << " ";

	*/		
			for (int t = 0; t < N1.size(); t++)
			{
				if (N1[t] >= PN1[0] && N1[t] <= PN1[1] && N2[t] >= PN2[0] && N2[t] <= PN2[1] && N3[t] >= PN3[0] && N3[t] <= PN3[1] ) pid[1].push_back(make_pair(t + 1, T[t + 1])), B[T[t + 1]] = 1;
				else if (N1[t] > PN1[1] && N1[t] <= PN1[2] && N2[t] >= PN2[0] && N2[t] <= PN2[1] && N3[t] >= PN3[0] && N3[t] <= PN3[1] ) pid[2].push_back(make_pair(t + 1, T[t + 1])), B[T[t + 1]] = 2;
				else if (N1[t] >= PN1[0] && N1[t] <= PN1[1] && N2[t] > PN2[1] && N2[t] <= PN2[2] && N3[t] >= PN3[0] && N3[t] <= PN3[1] ) pid[3].push_back(make_pair(t + 1, T[t + 1])), B[T[t + 1]] = 3;
				else if (N1[t] > PN1[1] && N1[t] <= PN1[2] && N2[t] > PN2[1] && N2[t] <= PN2[2] && N3[t] >= PN3[0] && N3[t] <= PN3[1] ) pid[4].push_back(make_pair(t + 1, T[t + 1])), B[T[t + 1]] = 4;

				else if (N1[t] >= PN1[0] && N1[t] <= PN1[1] && N2[t] >= PN2[0] && N2[t] <= PN2[1] && N3[t] > PN3[1] && N3[t] <= PN3[2] ) pid[5].push_back(make_pair(t + 1, T[t + 1])), B[T[t + 1]] = 5;
				else if (N1[t] > PN1[1] && N1[t] <= PN1[2] && N2[t] >= PN2[0] && N2[t] <= PN2[1] && N3[t] > PN3[1] && N3[t] <= PN3[2] ) pid[6].push_back(make_pair(t + 1, T[t + 1])), B[T[t + 1]] = 6;
				else if (N1[t] >= PN1[0] && N1[t] <= PN1[1] && N2[t] > PN2[1] && N2[t] <= PN2[2] && N3[t] > PN3[1] && N3[t] <= PN3[2] ) pid[7].push_back(make_pair(t + 1, T[t + 1])), B[T[t + 1]] = 7;
				else if (N1[t] > PN1[1] && N1[t] <= PN1[2] && N2[t] > PN2[1] && N2[t] <= PN2[2] && N3[t] > PN3[1] && N3[t] <= PN3[2] ) pid[8].push_back(make_pair(t + 1, T[t + 1])), B[T[t + 1]] = 8;

				
			}


		/*	for (int i = 1; i <= 8; i++)
			{
				cout << "pid" << i << ": ";

				for (int j = 0; j < pid[i].size(); j++)
				{
					cout << pid[i][j].first<<"("<<pid[i][j].second<<")" << " ";
				}
				cout << endl;
			}

			*/
			

		}
	} while (FALSE);


	SQLFreeHandle(SQL_HANDLE_STMT, SQLStatementHandle);
	SQLDisconnect(SQLConnectionHandle);
	SQLFreeHandle(SQL_HANDLE_DBC, SQLConnectionHandle);
	SQLFreeHandle(SQL_HANDLE_ENV, SQLEnvHandle);
	// Frees the resources and disconnects

	//getchar();

	return 0;
}


int neighbor_info()
{

	neighbor[1].nb1 = 2;
	neighbor[1].x1 = BN1[1];
	neighbor[1].y1 = BN2[0];
	neighbor[1].z1 = BN3[0];
	
	neighbor[1].nb2 = 4;
	neighbor[1].x2 = BN1[0];
	neighbor[1].y2 = BN2[1];
	neighbor[1].z2 = BN3[0];
	
	neighbor[1].nb3 = 10;
	neighbor[1].x3 = BN1[0];
	neighbor[1].y3 = BN2[0];
	neighbor[1].z3 = BN3[1];


	neighbor[2].nb1 = 3;
	neighbor[2].x1 = BN1[2];
	neighbor[2].y1 = BN2[0];
	neighbor[2].z1 = BN3[0];

	neighbor[2].nb2 = 5;
	neighbor[2].x2 = BN1[1];
	neighbor[2].y2 = BN2[1];
	neighbor[2].z2 = BN3[0];

	neighbor[2].nb3 = 11;
	neighbor[2].x3 = BN1[1];
	neighbor[2].y3 = BN2[0];
	neighbor[2].z3 = BN3[1];
	


	neighbor[3].nb1 = -1;
	neighbor[3].x1 = -1;
	neighbor[3].y1 = -1;
	neighbor[3].z1 = -1;
	
	neighbor[3].nb2 = 6;
	neighbor[3].x2 = BN1[2];
	neighbor[3].y2 = BN2[1];
	neighbor[3].z2 = BN3[0];
	
	neighbor[3].nb3 = 12;
	neighbor[3].x3 = BN1[2];
	neighbor[3].y3 = BN2[0];
	neighbor[3].z3 = BN3[1];


	neighbor[4].nb1 = 5;
	neighbor[4].x1 = BN1[1];
	neighbor[4].y1 = BN2[1];
	neighbor[4].z1 = BN3[0];
	
	neighbor[4].nb2 = 7;
	neighbor[4].x2 = BN1[0];
	neighbor[4].y2 = BN2[2];
	neighbor[4].z2 = BN3[0];
	
	neighbor[4].nb3 = 13;
	neighbor[4].x3 = BN1[0];
	neighbor[4].y3 = BN2[1];
	neighbor[4].z3 = BN3[1];
	


	neighbor[5].nb1 = 6;
	neighbor[5].x1 = BN1[2];
	neighbor[5].y1 = BN2[1];
	neighbor[5].z1 = BN3[0];
	
	neighbor[5].nb2 = 8;
	neighbor[5].x2 = BN1[1];
	neighbor[5].y2 = BN2[2];
	neighbor[5].z2 = BN3[0];
	
	neighbor[5].nb3 = 14;
	neighbor[5].x3 = BN1[1];
	neighbor[5].y3 = BN2[1];
	neighbor[5].z3 = BN3[1];
	

	neighbor[6].nb1 = -1;
	neighbor[6].x1 = -1;
	neighbor[6].y1 = -1;
	neighbor[6].z1 = -1;
	
	neighbor[6].nb2 = 9;
	neighbor[6].x2 = BN1[2];
	neighbor[6].y2 = BN2[2];
	neighbor[6].z2 = BN3[0];
	
	neighbor[6].nb3 = 15;
	neighbor[6].x3 = BN1[2];
	neighbor[6].y3 = BN2[1];
	neighbor[6].z3 = BN3[1];
	

	neighbor[7].nb1 = 8;
	neighbor[7].x1 = BN1[1];
	neighbor[7].y1 = BN2[2];
	neighbor[7].z1 = BN3[0];
	
	neighbor[7].nb2 = -1;
	neighbor[7].x2 = -1;
	neighbor[7].y2 = -1;
	neighbor[7].z2 = -1;
	
	neighbor[7].nb3 = 16;
	neighbor[7].x3 = BN1[0];
	neighbor[7].y3 = BN2[2];
	neighbor[7].z3 = BN3[1];
	

	neighbor[8].nb1 = 9;
	neighbor[8].x1 = BN1[2];
	neighbor[8].y1 = BN2[2];
	neighbor[8].z1 = BN3[0];
	
	neighbor[8].nb2 = -1;
	neighbor[8].x2 = -1;
	neighbor[8].y2 = -1;
	neighbor[8].z2 = -1;
	
	neighbor[8].nb3 = 17;
	neighbor[8].x3 = BN1[1];
	neighbor[8].y3 = BN2[2];
	neighbor[8].z3 = BN3[1];
	

	neighbor[9].nb1 = -1;
	neighbor[9].x1 = -1;
	neighbor[9].y1 = -1;
	neighbor[9].z1 = -1;
	
	neighbor[9].nb2 = -1;
	neighbor[9].x2 = -1;
	neighbor[9].y2 = -1;
	neighbor[9].z2 = -1;
	
	neighbor[9].nb3 = 18;
	neighbor[9].x3 = BN1[2];
	neighbor[9].y3 = BN2[2];
	neighbor[9].z3 = BN3[1];
	

	neighbor[10].nb1 = 11;
	neighbor[10].x1 = BN1[1];
	neighbor[10].y1 = BN2[0];
	neighbor[10].z1 = BN3[1];

	neighbor[10].nb2 = 13;
	neighbor[10].x2 = BN1[0];
	neighbor[10].y2 = BN2[1];
	neighbor[10].z2 = BN3[1];

	neighbor[10].nb3 = 19;
	neighbor[10].x3 = BN1[0];
	neighbor[10].y3 = BN2[0];
	neighbor[10].z3 = BN3[2];
	

	neighbor[11].nb1 = 12;
	neighbor[11].x1 = BN1[2];
	neighbor[11].y1 = BN2[0];
	neighbor[11].z1 = BN3[1];
	
	neighbor[11].nb2 = 14;
	neighbor[11].x2 = BN1[1];
	neighbor[11].y2 = BN2[1];
	neighbor[11].z2 = BN3[1];
	
	neighbor[11].nb3 = 20;
	neighbor[11].x3 = BN1[1];
	neighbor[11].y3 = BN2[0];
	neighbor[11].z3 = BN3[2];
	


	neighbor[12].nb1 = -1;
	neighbor[12].x1 = -1;
	neighbor[12].y1 = -1;
	neighbor[12].z1 = -1;
	
	neighbor[12].nb2 = 15;
	neighbor[12].x2 = BN1[2];
	neighbor[12].y2 = BN2[1];
	neighbor[12].z2 = BN3[1];

	neighbor[12].nb3 = 21;
	neighbor[12].x3 = BN1[2];
	neighbor[12].y3 = BN2[0];
	neighbor[12].z3 = BN3[2];
	

	neighbor[13].nb1 = 14;
	neighbor[13].x1 = BN1[1];
	neighbor[13].y1 = BN2[1];
	neighbor[13].z1 = BN3[1];
	
	neighbor[13].nb2 = 16;
	neighbor[13].x2 = BN1[0];
	neighbor[13].y2 = BN2[2];
	neighbor[13].z2 = BN3[1];
	
	neighbor[13].nb3 = 22;
	neighbor[13].x3 = BN1[0];
	neighbor[13].y3 = BN2[1];
	neighbor[13].z3 = BN3[2];
	

	neighbor[14].nb1 = 15;
	neighbor[14].x1 = BN1[2];
	neighbor[14].y1 = BN2[1];
	neighbor[14].z1 = BN3[1];
	
	neighbor[14].nb2 = 17;
	neighbor[14].x2 = BN1[1];
	neighbor[14].y2 = BN2[2];
	neighbor[14].z2 = BN3[1];
	
	neighbor[14].nb3 = 23;
	neighbor[14].x3 = BN1[1];
	neighbor[14].y3 = BN2[1];
	neighbor[14].z3 = BN3[2];



	neighbor[15].nb1 = -1;
	neighbor[15].x1 = -1;
	neighbor[15].y1 = -1;
	neighbor[15].z1 = -1;

	neighbor[15].nb2 = 18;
	neighbor[15].x2 = BN1[2];
	neighbor[15].y2 = BN2[2];
	neighbor[15].z2 = BN3[1];
	
	neighbor[15].nb3 = 24;
	neighbor[15].x3 = BN1[2];
	neighbor[15].y3 = BN2[1];
	neighbor[15].z3 = BN3[2];
	


	neighbor[16].nb1 = 17;
	neighbor[16].x1 = BN1[1];
	neighbor[16].y1 = BN2[2];
	neighbor[16].z1 = BN3[1];
	
	neighbor[16].nb2 = -1;
	neighbor[16].x2 = -1;
	neighbor[16].y2 = -1;
	neighbor[16].z2 = -1;
	
	neighbor[16].nb3 = 25;
	neighbor[16].x3 = BN1[0];
	neighbor[16].y3 = BN2[2];
	neighbor[16].z3 = BN3[2];
	

	neighbor[17].nb1 = 18;
	neighbor[17].x1 = BN1[2];
	neighbor[17].y1 = BN2[2];
	neighbor[17].z1 = BN3[1];
	
	neighbor[17].nb2 = -1;
	neighbor[17].x2 = -1;
	neighbor[17].y2 = -1;
	neighbor[17].z2 = -1;

	neighbor[17].nb3 = 26;
	neighbor[17].x3 = BN1[1];
	neighbor[17].y3 = BN2[2];
	neighbor[17].z3 = BN3[2];


	neighbor[18].nb1 = -1;
	neighbor[18].x1 = -1;
	neighbor[18].y1 = -1;
	neighbor[18].z1 = -1;

	neighbor[18].nb2 = -1;
	neighbor[18].x2 = -1;
	neighbor[18].y2 = -1;
	neighbor[18].z2 = -1;
	
	neighbor[18].nb3 = 27;
	neighbor[18].x3 = BN1[2];
	neighbor[18].y3 = BN2[2];
	neighbor[18].z3 = BN3[2];
	

	neighbor[19].nb1 = 20;
	neighbor[19].x1 = BN1[1];
	neighbor[19].y1 = BN2[0];
	neighbor[19].z1 = BN3[2];
	
	neighbor[19].nb2 = 22;
	neighbor[19].x2 = BN1[0];
	neighbor[19].y2 = BN2[1];
	neighbor[19].z2 = BN3[2];
	
	neighbor[19].nb3 = -1;
	neighbor[19].x3 = -1;
	neighbor[19].y3 = -1;
	neighbor[19].z3 = -1;
	

	neighbor[20].nb1 = 21;
	neighbor[20].x1 = BN1[2];
	neighbor[20].y1 = BN2[0];
	neighbor[20].z1 = BN3[2];
	
	neighbor[20].nb2 = 23;
	neighbor[20].x2 = BN1[1];
	neighbor[20].y2 = BN2[1];
	neighbor[20].z2 = BN3[2];
	
	neighbor[20].nb3 = -1;
	neighbor[20].x3 = -1;
	neighbor[20].y3 = -1;
	neighbor[20].z3 = -1;



	neighbor[21].nb1 = -1;
	neighbor[21].x1 = -1;
	neighbor[21].y1 = -1;
	neighbor[21].z1 = -1;
	
	neighbor[21].nb2 = 24;
	neighbor[21].x2 = BN1[2];
	neighbor[21].y2 = BN2[1];
	neighbor[21].z2 = BN3[2];
	
	neighbor[21].nb3 = -1;
	neighbor[21].x3 = -1;
	neighbor[21].y3 = -1;
	neighbor[21].z3 = -1;


	neighbor[22].nb1 = 23;
	neighbor[22].x1 = BN1[1];
	neighbor[22].y1 = BN2[1];
	neighbor[22].z1 = BN3[2];
	
	neighbor[22].nb2 = 25;
	neighbor[22].x2 = BN1[0];
	neighbor[22].y2 = BN2[2];
	neighbor[22].z2 = BN3[2];
	
	neighbor[22].nb3 = -1;
	neighbor[22].x3 = -1;
	neighbor[22].y3 = -1;
	neighbor[22].z3 = -1;
	

	neighbor[23].nb1 = 24;
	neighbor[23].x1 = BN1[2];
	neighbor[23].y1 = BN2[1];
	neighbor[23].z1 = BN3[2];
	
	neighbor[23].nb2 = 26;
	neighbor[23].x2 = BN1[1];
	neighbor[23].y2 = BN2[2];
	neighbor[23].z2 = BN3[2];
	
	neighbor[23].nb3 = -1;
	neighbor[23].x3 = -1;
	neighbor[23].y3 = -1;
	neighbor[23].z3 = -1;
	

	neighbor[24].nb1 = -1;
	neighbor[24].x1 = -1;
	neighbor[24].y1 = -1;
	neighbor[24].z1 = -1;
	
	neighbor[24].nb2 = 27;
	neighbor[24].x2 = BN1[2];
	neighbor[24].y2 = BN2[2];
	neighbor[24].z2 = BN3[2];

	neighbor[24].nb3 = -1;
	neighbor[24].x3 = -1;
	neighbor[24].y3 = -1;
	neighbor[24].z3 = -1;


	neighbor[25].nb1 = 26;
	neighbor[25].x1 = BN1[1];
	neighbor[25].y1 = BN2[2];
	neighbor[25].z1 = BN3[2];

	neighbor[25].nb2 = -1;
	neighbor[25].x2 = -1;
	neighbor[25].y2 = -1;
	neighbor[25].z2 = -1;

	neighbor[25].nb3 = -1;
	neighbor[25].x3 = -1;
	neighbor[25].y3 = -1;
	neighbor[25].z3 = -1;

	neighbor[26].nb1 = 27;
	neighbor[26].x1 = BN1[2];
	neighbor[26].y1 = BN2[2];
	neighbor[26].z1 = BN3[2];
	
	neighbor[26].nb2 = -1;
	neighbor[26].x2 = -1;
	neighbor[26].y2 = -1;
	neighbor[26].z2 = -1;
	
	neighbor[26].nb3 = -1;
	neighbor[26].x3 = -1;
	neighbor[26].y3 = -1;
	neighbor[26].z3 = -1;
	
	

	neighbor[27].nb1 = -1;
	neighbor[27].x1 = -1;
	neighbor[27].y1 = -1;
	neighbor[27].z1 = -1;

	neighbor[27].nb2 = -1;
	neighbor[27].x2 = -1;
	neighbor[27].y2 = -1;
	neighbor[27].z2 = -1;
	
	neighbor[27].nb3 = -1;
	neighbor[27].x3 = -1;
	neighbor[27].y3 = -1;
	neighbor[27].z3 = -1;
	
	
	

	
/*	for (int i = 1; i <= 64; i++)
	{
		cout << neighbor[i].nb1 << " " << neighbor[i].x1 << " " << neighbor[i].y1 << " " << neighbor[i].nb2 << " " << neighbor[i].x2 << " " << neighbor[i].y2 <<endl;
	}
	cout << endl;
*/
	

	return 0;
	
}


bool comp(pair<int, double>p1, pair<int, double>p2){
	return p1.second < p2.second;
}


double calculate(double x1, double x2, double x3)
{

	return (x1+x2+x3);
}


int top_k(string a1, string a2, string a3,int k)
{
	int candidate=1,temp_p;
	double S_k, S_unseen;




	//int p_check[25];
	int b_check[30];
	int t_check[12000];

	for (int i = 0; i < 12000; i++) t_check[i] = 0;
	for (int i = 0; i < 30; i++) b_check[i] = 0;
	


	b_check[1] = 1;

	vector< pair<int, double> >S;
	vector< pair<int, double> >H;


	while (1)
	{
		
		temp_p = B[candidate];
		
		for (int i = 0; i < pid[temp_p].size(); i++)
		{
			if (pid[temp_p][i].second == candidate && t_check[pid[temp_p][i].first] == 0 && A1[pid[temp_p][i].first - 1] == a1 && A2[pid[temp_p][i].first - 1] == a2 && A3[pid[temp_p][i].first - 1] == a3)
			{
				//double score = N1[pid[temp_p][i].first - 1] + N2[pid[temp_p][i].first - 1] + N3[pid[temp_p][i].first - 1];
				double score = calculate(N1[pid[temp_p][i].first - 1], N2[pid[temp_p][i].first - 1], N3[pid[temp_p][i].first - 1]);

				S.push_back(make_pair(pid[temp_p][i].first, score));

				t_check[pid[temp_p][i].first] = 1;
			}
		}

		sort(S.begin(), S.end(), comp);
		
	/*	cout << "S list:";
		for (int i = 0; i<S.size(); i++)
		{
			cout << "f(t"<<S[i].first<<")="<<S[i].second<<" ";
		}
		cout << endl;
		*/
		if (neighbor[candidate].nb1 > 0 && b_check[neighbor[candidate].nb1] == 0)
		{
			//H.push_back(make_pair(neighbor[candidate].nb1, neighbor[candidate].x1 + neighbor[candidate].y1 + neighbor[candidate].z1));
			H.push_back(make_pair(neighbor[candidate].nb1, calculate(neighbor[candidate].x1, neighbor[candidate].y1, neighbor[candidate].z1)));
			b_check[neighbor[candidate].nb1] = 1;
		}
		if (neighbor[candidate].nb2 > 0 && b_check[neighbor[candidate].nb2] == 0)
		{
			//H.push_back(make_pair(neighbor[candidate].nb2, neighbor[candidate].x2 + neighbor[candidate].y2 + neighbor[candidate].z2));
			H.push_back(make_pair(neighbor[candidate].nb2, calculate(neighbor[candidate].x2, neighbor[candidate].y2, neighbor[candidate].z2)));
			b_check[neighbor[candidate].nb2] = 1;
		}
		if (neighbor[candidate].nb3 > 0 && b_check[neighbor[candidate].nb3] == 0)
		{
			//H.push_back(make_pair(neighbor[candidate].nb3, neighbor[candidate].x3 + neighbor[candidate].y3 + neighbor[candidate].z3));
			H.push_back(make_pair(neighbor[candidate].nb3, calculate(neighbor[candidate].x3, neighbor[candidate].y3, neighbor[candidate].z3)));
			b_check[neighbor[candidate].nb3] = 1;
		}



		if (H.size() == 0) break;
		sort(H.begin(), H.end(), comp);

	/*	cout << "H list:";
		for (int i = 0; i<H.size(); i++)
		{   
			
		 cout << "f(b" << H[i].first << ")=" << H[i].second << " ";
		}
		cout << endl;
		*/
		candidate = H[0].first;

		if (S.size() == 0) S_k = 0;
		else if(k<=S.size()) S_k = S[k-1].second;
		else S_k = S[S.size() - 1].second;

		S_unseen = H[0].second;

		//cout << " sk:" << S_k << "sunseen:" << S_unseen << endl;

		H.erase(H.begin());

		if (S_k <= S_unseen && S.size()==k ) break;
		//if (H.size() == 0) break;

	}

	cout <<endl <<"Selected tuples are : "<<endl;

	if (k > S.size()) k = S.size();

	for (int i = 0; i < k; i++)
	{
		//cout << S[i].first << " ";
		cout << Serial[S[i].first - 1] << " " << Name[S[i].first - 1] << " " << A1[S[i].first - 1] << " " << A2[S[i].first - 1] << " " << A3[S[i].first - 1] << " " << N1[S[i].first - 1] << " " << N2[S[i].first - 1] << " " << N3[S[i].first - 1]  << endl;
	}
	return 0;
}


int main()
{

	//equi_depth();
    //neighbor_info(); 
	
	high_resolution_clock::time_point t1 = high_resolution_clock::now();
	func(1);
	//func(2);
	//top_k("Dhaka", "Dhaka", "Mirpur", 100);
	//top_k("Khulna", "Kushtia", "Dowlotpur", 10);
	//equi_depth();
	//neighbor_info();
	high_resolution_clock::time_point t2 = high_resolution_clock::now();
	double duration = duration_cast<microseconds>(t2 - t1).count();

	cout <<endl<<"time :" <<duration/1000000<<" second"<<endl;
	//for (int i = 1; i <= 16; i++) cout << i << ": " << B[i] << endl;

	
	getchar();

}
